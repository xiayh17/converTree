// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getChildListFromParentVector
std::vector<std::vector<int> > getChildListFromParentVector(IntegerVector parents, int n);
RcppExport SEXP _converTree_getChildListFromParentVector(SEXP parentsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getChildListFromParentVector(parents, n));
    return rcpp_result_gen;
END_RCPP
}
// getNewickCode
std::string getNewickCode(std::vector<std::vector<int> > list, int root);
RcppExport SEXP _converTree_getNewickCode(SEXP listSEXP, SEXP rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type list(listSEXP);
    Rcpp::traits::input_parameter< int >::type root(rootSEXP);
    rcpp_result_gen = Rcpp::wrap(getNewickCode(list, root));
    return rcpp_result_gen;
END_RCPP
}
// init_boolMatrix
LogicalMatrix init_boolMatrix(int n, int m, bool value);
RcppExport SEXP _converTree_init_boolMatrix(SEXP nSEXP, SEXP mSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(init_boolMatrix(n, m, value));
    return rcpp_result_gen;
END_RCPP
}
// parentVector2ancMatrix
LogicalMatrix parentVector2ancMatrix(IntegerVector parents, int n);
RcppExport SEXP _converTree_parentVector2ancMatrix(SEXP parentsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(parentVector2ancMatrix(parents, n));
    return rcpp_result_gen;
END_RCPP
}
// ancMatrixToParVector
IntegerVector ancMatrixToParVector(LogicalMatrix anc, int n);
RcppExport SEXP _converTree_ancMatrixToParVector(SEXP ancSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(ancMatrixToParVector(anc, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_converTree_getChildListFromParentVector", (DL_FUNC) &_converTree_getChildListFromParentVector, 2},
    {"_converTree_getNewickCode", (DL_FUNC) &_converTree_getNewickCode, 2},
    {"_converTree_init_boolMatrix", (DL_FUNC) &_converTree_init_boolMatrix, 3},
    {"_converTree_parentVector2ancMatrix", (DL_FUNC) &_converTree_parentVector2ancMatrix, 2},
    {"_converTree_ancMatrixToParVector", (DL_FUNC) &_converTree_ancMatrixToParVector, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_converTree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
